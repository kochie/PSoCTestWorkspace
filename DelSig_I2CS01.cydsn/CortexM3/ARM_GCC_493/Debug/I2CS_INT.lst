ARM GAS  C:\Users\robert\AppData\Local\Temp\ccLB2jpd.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"I2CS_INT.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.I2CS_ISR,"ax",%progbits
  19              		.align	2
  20              		.global	I2CS_ISR
  21              		.thumb
  22              		.thumb_func
  23              		.type	I2CS_ISR, %function
  24              	I2CS_ISR:
  25              	.LFB0:
  26              		.file 1 ".\\Generated_Source\\PSoC5\\I2CS_INT.c"
   1:.\Generated_Source\PSoC5/I2CS_INT.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC5/I2CS_INT.c **** * File Name: I2CS_INT.c
   3:.\Generated_Source\PSoC5/I2CS_INT.c **** * Version 3.50
   4:.\Generated_Source\PSoC5/I2CS_INT.c **** *
   5:.\Generated_Source\PSoC5/I2CS_INT.c **** * Description:
   6:.\Generated_Source\PSoC5/I2CS_INT.c **** *  This file provides the source code of Interrupt Service Routine (ISR)
   7:.\Generated_Source\PSoC5/I2CS_INT.c **** *  for the I2C component.
   8:.\Generated_Source\PSoC5/I2CS_INT.c **** *
   9:.\Generated_Source\PSoC5/I2CS_INT.c **** ********************************************************************************
  10:.\Generated_Source\PSoC5/I2CS_INT.c **** * Copyright 2008-2015, Cypress Semiconductor Corporation. All rights reserved.
  11:.\Generated_Source\PSoC5/I2CS_INT.c **** * You may use this file only in accordance with the license, terms, conditions,
  12:.\Generated_Source\PSoC5/I2CS_INT.c **** * disclaimers, and limitations in the end user license agreement accompanying
  13:.\Generated_Source\PSoC5/I2CS_INT.c **** * the software package with which this file was provided.
  14:.\Generated_Source\PSoC5/I2CS_INT.c **** *******************************************************************************/
  15:.\Generated_Source\PSoC5/I2CS_INT.c **** 
  16:.\Generated_Source\PSoC5/I2CS_INT.c **** #include "I2CS_PVT.h"
  17:.\Generated_Source\PSoC5/I2CS_INT.c **** #include "cyapicallbacks.h"
  18:.\Generated_Source\PSoC5/I2CS_INT.c **** 
  19:.\Generated_Source\PSoC5/I2CS_INT.c **** 
  20:.\Generated_Source\PSoC5/I2CS_INT.c **** /*******************************************************************************
  21:.\Generated_Source\PSoC5/I2CS_INT.c **** *  Place your includes, defines and code here.
  22:.\Generated_Source\PSoC5/I2CS_INT.c **** ********************************************************************************/
  23:.\Generated_Source\PSoC5/I2CS_INT.c **** /* `#START I2CS_ISR_intc` */
  24:.\Generated_Source\PSoC5/I2CS_INT.c **** 
  25:.\Generated_Source\PSoC5/I2CS_INT.c **** /* `#END` */
  26:.\Generated_Source\PSoC5/I2CS_INT.c **** 
  27:.\Generated_Source\PSoC5/I2CS_INT.c **** 
  28:.\Generated_Source\PSoC5/I2CS_INT.c **** /*******************************************************************************
  29:.\Generated_Source\PSoC5/I2CS_INT.c **** * Function Name: I2CS_ISR
  30:.\Generated_Source\PSoC5/I2CS_INT.c **** ********************************************************************************
  31:.\Generated_Source\PSoC5/I2CS_INT.c **** *
ARM GAS  C:\Users\robert\AppData\Local\Temp\ccLB2jpd.s 			page 2


  32:.\Generated_Source\PSoC5/I2CS_INT.c **** * Summary:
  33:.\Generated_Source\PSoC5/I2CS_INT.c **** *  The handler for the I2C interrupt. The slave and master operations are
  34:.\Generated_Source\PSoC5/I2CS_INT.c **** *  handled here.
  35:.\Generated_Source\PSoC5/I2CS_INT.c **** *
  36:.\Generated_Source\PSoC5/I2CS_INT.c **** * Parameters:
  37:.\Generated_Source\PSoC5/I2CS_INT.c **** *  None.
  38:.\Generated_Source\PSoC5/I2CS_INT.c **** *
  39:.\Generated_Source\PSoC5/I2CS_INT.c **** * Return:
  40:.\Generated_Source\PSoC5/I2CS_INT.c **** *  None.
  41:.\Generated_Source\PSoC5/I2CS_INT.c **** *
  42:.\Generated_Source\PSoC5/I2CS_INT.c **** * Reentrant:
  43:.\Generated_Source\PSoC5/I2CS_INT.c **** *  No.
  44:.\Generated_Source\PSoC5/I2CS_INT.c **** *
  45:.\Generated_Source\PSoC5/I2CS_INT.c **** *******************************************************************************/
  46:.\Generated_Source\PSoC5/I2CS_INT.c **** CY_ISR(I2CS_ISR)
  47:.\Generated_Source\PSoC5/I2CS_INT.c **** {
  27              		.loc 1 47 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31 0000 80B5     		push	{r7, lr}
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 7, -8
  34              		.cfi_offset 14, -4
  35 0002 82B0     		sub	sp, sp, #8
  36              		.cfi_def_cfa_offset 16
  37 0004 00AF     		add	r7, sp, #0
  38              		.cfi_def_cfa_register 7
  48:.\Generated_Source\PSoC5/I2CS_INT.c **** #if (I2CS_MODE_SLAVE_ENABLED)
  49:.\Generated_Source\PSoC5/I2CS_INT.c ****    uint8  tmp8;
  50:.\Generated_Source\PSoC5/I2CS_INT.c **** #endif  /* (I2CS_MODE_SLAVE_ENABLED) */
  51:.\Generated_Source\PSoC5/I2CS_INT.c **** 
  52:.\Generated_Source\PSoC5/I2CS_INT.c ****     uint8  tmpCsr;
  53:.\Generated_Source\PSoC5/I2CS_INT.c ****     
  54:.\Generated_Source\PSoC5/I2CS_INT.c **** #ifdef I2CS_ISR_ENTRY_CALLBACK
  55:.\Generated_Source\PSoC5/I2CS_INT.c ****     I2CS_ISR_EntryCallback();
  56:.\Generated_Source\PSoC5/I2CS_INT.c **** #endif /* I2CS_ISR_ENTRY_CALLBACK */
  57:.\Generated_Source\PSoC5/I2CS_INT.c ****     
  58:.\Generated_Source\PSoC5/I2CS_INT.c **** 
  59:.\Generated_Source\PSoC5/I2CS_INT.c **** #if(I2CS_TIMEOUT_FF_ENABLED)
  60:.\Generated_Source\PSoC5/I2CS_INT.c ****     if(0u != I2CS_TimeoutGetStatus())
  61:.\Generated_Source\PSoC5/I2CS_INT.c ****     {
  62:.\Generated_Source\PSoC5/I2CS_INT.c ****         I2CS_TimeoutReset();
  63:.\Generated_Source\PSoC5/I2CS_INT.c ****         I2CS_state = I2CS_SM_EXIT_IDLE;
  64:.\Generated_Source\PSoC5/I2CS_INT.c ****         /* I2CS_CSR_REG should be cleared after reset */
  65:.\Generated_Source\PSoC5/I2CS_INT.c ****     }
  66:.\Generated_Source\PSoC5/I2CS_INT.c **** #endif /* (I2CS_TIMEOUT_FF_ENABLED) */
  67:.\Generated_Source\PSoC5/I2CS_INT.c **** 
  68:.\Generated_Source\PSoC5/I2CS_INT.c **** 
  69:.\Generated_Source\PSoC5/I2CS_INT.c ****     tmpCsr = I2CS_CSR_REG;      /* Make copy as interrupts clear */
  39              		.loc 1 69 0
  40 0006 964B     		ldr	r3, .L20
  41 0008 1B78     		ldrb	r3, [r3]
  42 000a FB71     		strb	r3, [r7, #7]
  70:.\Generated_Source\PSoC5/I2CS_INT.c **** 
  71:.\Generated_Source\PSoC5/I2CS_INT.c **** #if(I2CS_MODE_MULTI_MASTER_SLAVE_ENABLED)
  72:.\Generated_Source\PSoC5/I2CS_INT.c ****     if(I2CS_CHECK_START_GEN(I2CS_MCSR_REG))
ARM GAS  C:\Users\robert\AppData\Local\Temp\ccLB2jpd.s 			page 3


  73:.\Generated_Source\PSoC5/I2CS_INT.c ****     {
  74:.\Generated_Source\PSoC5/I2CS_INT.c ****         I2CS_CLEAR_START_GEN;
  75:.\Generated_Source\PSoC5/I2CS_INT.c **** 
  76:.\Generated_Source\PSoC5/I2CS_INT.c ****         /* Set transfer complete and error flags */
  77:.\Generated_Source\PSoC5/I2CS_INT.c ****         I2CS_mstrStatus |= (I2CS_MSTAT_ERR_XFER |
  78:.\Generated_Source\PSoC5/I2CS_INT.c ****                                         I2CS_GET_MSTAT_CMPLT);
  79:.\Generated_Source\PSoC5/I2CS_INT.c **** 
  80:.\Generated_Source\PSoC5/I2CS_INT.c ****         /* Slave was addressed */
  81:.\Generated_Source\PSoC5/I2CS_INT.c ****         I2CS_state = I2CS_SM_SLAVE;
  82:.\Generated_Source\PSoC5/I2CS_INT.c ****     }
  83:.\Generated_Source\PSoC5/I2CS_INT.c **** #endif /* (I2CS_MODE_MULTI_MASTER_SLAVE_ENABLED) */
  84:.\Generated_Source\PSoC5/I2CS_INT.c **** 
  85:.\Generated_Source\PSoC5/I2CS_INT.c **** 
  86:.\Generated_Source\PSoC5/I2CS_INT.c **** #if(I2CS_MODE_MULTI_MASTER_ENABLED)
  87:.\Generated_Source\PSoC5/I2CS_INT.c ****     if(I2CS_CHECK_LOST_ARB(tmpCsr))
  88:.\Generated_Source\PSoC5/I2CS_INT.c ****     {
  89:.\Generated_Source\PSoC5/I2CS_INT.c ****         /* Set errors */
  90:.\Generated_Source\PSoC5/I2CS_INT.c ****         I2CS_mstrStatus |= (I2CS_MSTAT_ERR_XFER     |
  91:.\Generated_Source\PSoC5/I2CS_INT.c ****                                         I2CS_MSTAT_ERR_ARB_LOST |
  92:.\Generated_Source\PSoC5/I2CS_INT.c ****                                         I2CS_GET_MSTAT_CMPLT);
  93:.\Generated_Source\PSoC5/I2CS_INT.c **** 
  94:.\Generated_Source\PSoC5/I2CS_INT.c ****         I2CS_DISABLE_INT_ON_STOP; /* Interrupt on Stop is enabled by write */
  95:.\Generated_Source\PSoC5/I2CS_INT.c **** 
  96:.\Generated_Source\PSoC5/I2CS_INT.c ****         #if(I2CS_MODE_MULTI_MASTER_SLAVE_ENABLED)
  97:.\Generated_Source\PSoC5/I2CS_INT.c ****             if(I2CS_CHECK_ADDRESS_STS(tmpCsr))
  98:.\Generated_Source\PSoC5/I2CS_INT.c ****             {
  99:.\Generated_Source\PSoC5/I2CS_INT.c ****                 /* Slave was addressed */
 100:.\Generated_Source\PSoC5/I2CS_INT.c ****                 I2CS_state = I2CS_SM_SLAVE;
 101:.\Generated_Source\PSoC5/I2CS_INT.c ****             }
 102:.\Generated_Source\PSoC5/I2CS_INT.c ****             else
 103:.\Generated_Source\PSoC5/I2CS_INT.c ****             {
 104:.\Generated_Source\PSoC5/I2CS_INT.c ****                 I2CS_BUS_RELEASE;
 105:.\Generated_Source\PSoC5/I2CS_INT.c **** 
 106:.\Generated_Source\PSoC5/I2CS_INT.c ****                 I2CS_state = I2CS_SM_EXIT_IDLE;
 107:.\Generated_Source\PSoC5/I2CS_INT.c ****             }
 108:.\Generated_Source\PSoC5/I2CS_INT.c ****         #else
 109:.\Generated_Source\PSoC5/I2CS_INT.c ****             I2CS_BUS_RELEASE;
 110:.\Generated_Source\PSoC5/I2CS_INT.c **** 
 111:.\Generated_Source\PSoC5/I2CS_INT.c ****             I2CS_state = I2CS_SM_EXIT_IDLE;
 112:.\Generated_Source\PSoC5/I2CS_INT.c **** 
 113:.\Generated_Source\PSoC5/I2CS_INT.c ****         #endif /* (I2CS_MODE_MULTI_MASTER_SLAVE_ENABLED) */
 114:.\Generated_Source\PSoC5/I2CS_INT.c ****     }
 115:.\Generated_Source\PSoC5/I2CS_INT.c **** #endif /* (I2CS_MODE_MULTI_MASTER_ENABLED) */
 116:.\Generated_Source\PSoC5/I2CS_INT.c **** 
 117:.\Generated_Source\PSoC5/I2CS_INT.c ****     /* Check for master operation mode */
 118:.\Generated_Source\PSoC5/I2CS_INT.c ****     if(I2CS_CHECK_SM_MASTER)
  43              		.loc 1 118 0
  44 000c 954B     		ldr	r3, .L20+4
  45 000e 1B78     		ldrb	r3, [r3]
  46 0010 DBB2     		uxtb	r3, r3
  47 0012 03F04003 		and	r3, r3, #64
  48 0016 DBB2     		uxtb	r3, r3
  49 0018 002B     		cmp	r3, #0
  50 001a 40F01E81 		bne	.L1
 119:.\Generated_Source\PSoC5/I2CS_INT.c ****     {
 120:.\Generated_Source\PSoC5/I2CS_INT.c ****     #if(I2CS_MODE_MASTER_ENABLED)
 121:.\Generated_Source\PSoC5/I2CS_INT.c ****         if(I2CS_CHECK_BYTE_COMPLETE(tmpCsr))
ARM GAS  C:\Users\robert\AppData\Local\Temp\ccLB2jpd.s 			page 4


 122:.\Generated_Source\PSoC5/I2CS_INT.c ****         {
 123:.\Generated_Source\PSoC5/I2CS_INT.c ****             switch (I2CS_state)
 124:.\Generated_Source\PSoC5/I2CS_INT.c ****             {
 125:.\Generated_Source\PSoC5/I2CS_INT.c ****             case I2CS_SM_MSTR_WR_ADDR:  /* After address is sent, write data */
 126:.\Generated_Source\PSoC5/I2CS_INT.c ****             case I2CS_SM_MSTR_RD_ADDR:  /* After address is sent, read data */
 127:.\Generated_Source\PSoC5/I2CS_INT.c **** 
 128:.\Generated_Source\PSoC5/I2CS_INT.c ****                 tmpCsr &= ((uint8) ~I2CS_CSR_STOP_STATUS); /* Clear Stop bit history on address pha
 129:.\Generated_Source\PSoC5/I2CS_INT.c **** 
 130:.\Generated_Source\PSoC5/I2CS_INT.c ****                 if(I2CS_CHECK_ADDR_ACK(tmpCsr))
 131:.\Generated_Source\PSoC5/I2CS_INT.c ****                 {
 132:.\Generated_Source\PSoC5/I2CS_INT.c ****                     /* Setup for transmit or receive of data */
 133:.\Generated_Source\PSoC5/I2CS_INT.c ****                     if(I2CS_state == I2CS_SM_MSTR_WR_ADDR)   /* TRANSMIT data */
 134:.\Generated_Source\PSoC5/I2CS_INT.c ****                     {
 135:.\Generated_Source\PSoC5/I2CS_INT.c ****                         /* Check if at least one byte to transfer */
 136:.\Generated_Source\PSoC5/I2CS_INT.c ****                         if(I2CS_mstrWrBufSize > 0u)
 137:.\Generated_Source\PSoC5/I2CS_INT.c ****                         {
 138:.\Generated_Source\PSoC5/I2CS_INT.c ****                             /* Load the 1st data byte */
 139:.\Generated_Source\PSoC5/I2CS_INT.c ****                             I2CS_DATA_REG = I2CS_mstrWrBufPtr[0u];
 140:.\Generated_Source\PSoC5/I2CS_INT.c ****                             I2CS_TRANSMIT_DATA;
 141:.\Generated_Source\PSoC5/I2CS_INT.c ****                             I2CS_mstrWrBufIndex = 1u;   /* Set index to 2nd element */
 142:.\Generated_Source\PSoC5/I2CS_INT.c **** 
 143:.\Generated_Source\PSoC5/I2CS_INT.c ****                             /* Set transmit state until done */
 144:.\Generated_Source\PSoC5/I2CS_INT.c ****                             I2CS_state = I2CS_SM_MSTR_WR_DATA;
 145:.\Generated_Source\PSoC5/I2CS_INT.c ****                         }
 146:.\Generated_Source\PSoC5/I2CS_INT.c ****                         /* End of buffer: complete writing */
 147:.\Generated_Source\PSoC5/I2CS_INT.c ****                         else if(I2CS_CHECK_NO_STOP(I2CS_mstrControl))
 148:.\Generated_Source\PSoC5/I2CS_INT.c ****                         {
 149:.\Generated_Source\PSoC5/I2CS_INT.c ****                             /* Set write complete and master halted */
 150:.\Generated_Source\PSoC5/I2CS_INT.c ****                             I2CS_mstrStatus |= (I2CS_MSTAT_XFER_HALT |
 151:.\Generated_Source\PSoC5/I2CS_INT.c ****                                                             I2CS_MSTAT_WR_CMPLT);
 152:.\Generated_Source\PSoC5/I2CS_INT.c **** 
 153:.\Generated_Source\PSoC5/I2CS_INT.c ****                             I2CS_state = I2CS_SM_MSTR_HALT; /* Expect ReStart */
 154:.\Generated_Source\PSoC5/I2CS_INT.c ****                             I2CS_DisableInt();
 155:.\Generated_Source\PSoC5/I2CS_INT.c ****                         }
 156:.\Generated_Source\PSoC5/I2CS_INT.c ****                         else
 157:.\Generated_Source\PSoC5/I2CS_INT.c ****                         {
 158:.\Generated_Source\PSoC5/I2CS_INT.c ****                             I2CS_ENABLE_INT_ON_STOP; /* Enable interrupt on Stop, to catch it */
 159:.\Generated_Source\PSoC5/I2CS_INT.c ****                             I2CS_GENERATE_STOP;
 160:.\Generated_Source\PSoC5/I2CS_INT.c ****                         }
 161:.\Generated_Source\PSoC5/I2CS_INT.c ****                     }
 162:.\Generated_Source\PSoC5/I2CS_INT.c ****                     else  /* Master receive data */
 163:.\Generated_Source\PSoC5/I2CS_INT.c ****                     {
 164:.\Generated_Source\PSoC5/I2CS_INT.c ****                         I2CS_READY_TO_READ; /* Release bus to read data */
 165:.\Generated_Source\PSoC5/I2CS_INT.c **** 
 166:.\Generated_Source\PSoC5/I2CS_INT.c ****                         I2CS_state  = I2CS_SM_MSTR_RD_DATA;
 167:.\Generated_Source\PSoC5/I2CS_INT.c ****                     }
 168:.\Generated_Source\PSoC5/I2CS_INT.c ****                 }
 169:.\Generated_Source\PSoC5/I2CS_INT.c ****                 /* Address is NACKed */
 170:.\Generated_Source\PSoC5/I2CS_INT.c ****                 else if(I2CS_CHECK_ADDR_NAK(tmpCsr))
 171:.\Generated_Source\PSoC5/I2CS_INT.c ****                 {
 172:.\Generated_Source\PSoC5/I2CS_INT.c ****                     /* Set Address NAK error */
 173:.\Generated_Source\PSoC5/I2CS_INT.c ****                     I2CS_mstrStatus |= (I2CS_MSTAT_ERR_XFER |
 174:.\Generated_Source\PSoC5/I2CS_INT.c ****                                                     I2CS_MSTAT_ERR_ADDR_NAK);
 175:.\Generated_Source\PSoC5/I2CS_INT.c **** 
 176:.\Generated_Source\PSoC5/I2CS_INT.c ****                     if(I2CS_CHECK_NO_STOP(I2CS_mstrControl))
 177:.\Generated_Source\PSoC5/I2CS_INT.c ****                     {
 178:.\Generated_Source\PSoC5/I2CS_INT.c ****                         I2CS_mstrStatus |= (I2CS_MSTAT_XFER_HALT |
ARM GAS  C:\Users\robert\AppData\Local\Temp\ccLB2jpd.s 			page 5


 179:.\Generated_Source\PSoC5/I2CS_INT.c ****                                                         I2CS_GET_MSTAT_CMPLT);
 180:.\Generated_Source\PSoC5/I2CS_INT.c **** 
 181:.\Generated_Source\PSoC5/I2CS_INT.c ****                         I2CS_state = I2CS_SM_MSTR_HALT; /* Expect RESTART */
 182:.\Generated_Source\PSoC5/I2CS_INT.c ****                         I2CS_DisableInt();
 183:.\Generated_Source\PSoC5/I2CS_INT.c ****                     }
 184:.\Generated_Source\PSoC5/I2CS_INT.c ****                     else  /* Do normal Stop */
 185:.\Generated_Source\PSoC5/I2CS_INT.c ****                     {
 186:.\Generated_Source\PSoC5/I2CS_INT.c ****                         I2CS_ENABLE_INT_ON_STOP; /* Enable interrupt on Stop, to catch it */
 187:.\Generated_Source\PSoC5/I2CS_INT.c ****                         I2CS_GENERATE_STOP;
 188:.\Generated_Source\PSoC5/I2CS_INT.c ****                     }
 189:.\Generated_Source\PSoC5/I2CS_INT.c ****                 }
 190:.\Generated_Source\PSoC5/I2CS_INT.c ****                 else
 191:.\Generated_Source\PSoC5/I2CS_INT.c ****                 {
 192:.\Generated_Source\PSoC5/I2CS_INT.c ****                     /* Address phase is not set for some reason: error */
 193:.\Generated_Source\PSoC5/I2CS_INT.c ****                     #if(I2CS_TIMEOUT_ENABLED)
 194:.\Generated_Source\PSoC5/I2CS_INT.c ****                         /* Exit interrupt to take chance for timeout timer to handle this case */
 195:.\Generated_Source\PSoC5/I2CS_INT.c ****                         I2CS_DisableInt();
 196:.\Generated_Source\PSoC5/I2CS_INT.c ****                         I2CS_ClearPendingInt();
 197:.\Generated_Source\PSoC5/I2CS_INT.c ****                     #else
 198:.\Generated_Source\PSoC5/I2CS_INT.c ****                         /* Block execution flow: unexpected condition */
 199:.\Generated_Source\PSoC5/I2CS_INT.c ****                         CYASSERT(0u != 0u);
 200:.\Generated_Source\PSoC5/I2CS_INT.c ****                     #endif /* (I2CS_TIMEOUT_ENABLED) */
 201:.\Generated_Source\PSoC5/I2CS_INT.c ****                 }
 202:.\Generated_Source\PSoC5/I2CS_INT.c ****                 break;
 203:.\Generated_Source\PSoC5/I2CS_INT.c **** 
 204:.\Generated_Source\PSoC5/I2CS_INT.c ****             case I2CS_SM_MSTR_WR_DATA:
 205:.\Generated_Source\PSoC5/I2CS_INT.c **** 
 206:.\Generated_Source\PSoC5/I2CS_INT.c ****                 if(I2CS_CHECK_DATA_ACK(tmpCsr))
 207:.\Generated_Source\PSoC5/I2CS_INT.c ****                 {
 208:.\Generated_Source\PSoC5/I2CS_INT.c ****                     /* Check if end of buffer */
 209:.\Generated_Source\PSoC5/I2CS_INT.c ****                     if(I2CS_mstrWrBufIndex  < I2CS_mstrWrBufSize)
 210:.\Generated_Source\PSoC5/I2CS_INT.c ****                     {
 211:.\Generated_Source\PSoC5/I2CS_INT.c ****                         I2CS_DATA_REG =
 212:.\Generated_Source\PSoC5/I2CS_INT.c ****                                                  I2CS_mstrWrBufPtr[I2CS_mstrWrBufIndex];
 213:.\Generated_Source\PSoC5/I2CS_INT.c ****                         I2CS_TRANSMIT_DATA;
 214:.\Generated_Source\PSoC5/I2CS_INT.c ****                         I2CS_mstrWrBufIndex++;
 215:.\Generated_Source\PSoC5/I2CS_INT.c ****                     }
 216:.\Generated_Source\PSoC5/I2CS_INT.c ****                     /* End of buffer: complete writing */
 217:.\Generated_Source\PSoC5/I2CS_INT.c ****                     else if(I2CS_CHECK_NO_STOP(I2CS_mstrControl))
 218:.\Generated_Source\PSoC5/I2CS_INT.c ****                     {
 219:.\Generated_Source\PSoC5/I2CS_INT.c ****                         /* Set write complete and master halted */
 220:.\Generated_Source\PSoC5/I2CS_INT.c ****                         I2CS_mstrStatus |= (I2CS_MSTAT_XFER_HALT |
 221:.\Generated_Source\PSoC5/I2CS_INT.c ****                                                         I2CS_MSTAT_WR_CMPLT);
 222:.\Generated_Source\PSoC5/I2CS_INT.c **** 
 223:.\Generated_Source\PSoC5/I2CS_INT.c ****                         I2CS_state = I2CS_SM_MSTR_HALT;    /* Expect restart */
 224:.\Generated_Source\PSoC5/I2CS_INT.c ****                         I2CS_DisableInt();
 225:.\Generated_Source\PSoC5/I2CS_INT.c ****                     }
 226:.\Generated_Source\PSoC5/I2CS_INT.c ****                     else  /* Do normal Stop */
 227:.\Generated_Source\PSoC5/I2CS_INT.c ****                     {
 228:.\Generated_Source\PSoC5/I2CS_INT.c ****                         I2CS_ENABLE_INT_ON_STOP;    /* Enable interrupt on Stop, to catch it */
 229:.\Generated_Source\PSoC5/I2CS_INT.c ****                         I2CS_GENERATE_STOP;
 230:.\Generated_Source\PSoC5/I2CS_INT.c ****                     }
 231:.\Generated_Source\PSoC5/I2CS_INT.c ****                 }
 232:.\Generated_Source\PSoC5/I2CS_INT.c ****                 /* Last byte NAKed: end writing */
 233:.\Generated_Source\PSoC5/I2CS_INT.c ****                 else if(I2CS_CHECK_NO_STOP(I2CS_mstrControl))
 234:.\Generated_Source\PSoC5/I2CS_INT.c ****                 {
 235:.\Generated_Source\PSoC5/I2CS_INT.c ****                     /* Set write complete, short transfer and master halted */
ARM GAS  C:\Users\robert\AppData\Local\Temp\ccLB2jpd.s 			page 6


 236:.\Generated_Source\PSoC5/I2CS_INT.c ****                     I2CS_mstrStatus |= (I2CS_MSTAT_ERR_XFER       |
 237:.\Generated_Source\PSoC5/I2CS_INT.c ****                                                     I2CS_MSTAT_ERR_SHORT_XFER |
 238:.\Generated_Source\PSoC5/I2CS_INT.c ****                                                     I2CS_MSTAT_XFER_HALT      |
 239:.\Generated_Source\PSoC5/I2CS_INT.c ****                                                     I2CS_MSTAT_WR_CMPLT);
 240:.\Generated_Source\PSoC5/I2CS_INT.c **** 
 241:.\Generated_Source\PSoC5/I2CS_INT.c ****                     I2CS_state = I2CS_SM_MSTR_HALT;    /* Expect ReStart */
 242:.\Generated_Source\PSoC5/I2CS_INT.c ****                     I2CS_DisableInt();
 243:.\Generated_Source\PSoC5/I2CS_INT.c ****                 }
 244:.\Generated_Source\PSoC5/I2CS_INT.c ****                 else  /* Do normal Stop */
 245:.\Generated_Source\PSoC5/I2CS_INT.c ****                 {
 246:.\Generated_Source\PSoC5/I2CS_INT.c ****                     I2CS_ENABLE_INT_ON_STOP;    /* Enable interrupt on Stop, to catch it */
 247:.\Generated_Source\PSoC5/I2CS_INT.c ****                     I2CS_GENERATE_STOP;
 248:.\Generated_Source\PSoC5/I2CS_INT.c **** 
 249:.\Generated_Source\PSoC5/I2CS_INT.c ****                     /* Set short transfer and error flag */
 250:.\Generated_Source\PSoC5/I2CS_INT.c ****                     I2CS_mstrStatus |= (I2CS_MSTAT_ERR_SHORT_XFER |
 251:.\Generated_Source\PSoC5/I2CS_INT.c ****                                                     I2CS_MSTAT_ERR_XFER);
 252:.\Generated_Source\PSoC5/I2CS_INT.c ****                 }
 253:.\Generated_Source\PSoC5/I2CS_INT.c **** 
 254:.\Generated_Source\PSoC5/I2CS_INT.c ****                 break;
 255:.\Generated_Source\PSoC5/I2CS_INT.c **** 
 256:.\Generated_Source\PSoC5/I2CS_INT.c ****             case I2CS_SM_MSTR_RD_DATA:
 257:.\Generated_Source\PSoC5/I2CS_INT.c **** 
 258:.\Generated_Source\PSoC5/I2CS_INT.c ****                 I2CS_mstrRdBufPtr[I2CS_mstrRdBufIndex] = I2CS_DATA_REG;
 259:.\Generated_Source\PSoC5/I2CS_INT.c ****                 I2CS_mstrRdBufIndex++;
 260:.\Generated_Source\PSoC5/I2CS_INT.c **** 
 261:.\Generated_Source\PSoC5/I2CS_INT.c ****                 /* Check if end of buffer */
 262:.\Generated_Source\PSoC5/I2CS_INT.c ****                 if(I2CS_mstrRdBufIndex < I2CS_mstrRdBufSize)
 263:.\Generated_Source\PSoC5/I2CS_INT.c ****                 {
 264:.\Generated_Source\PSoC5/I2CS_INT.c ****                     I2CS_ACK_AND_RECEIVE;       /* ACK and receive byte */
 265:.\Generated_Source\PSoC5/I2CS_INT.c ****                 }
 266:.\Generated_Source\PSoC5/I2CS_INT.c ****                 /* End of buffer: complete reading */
 267:.\Generated_Source\PSoC5/I2CS_INT.c ****                 else if(I2CS_CHECK_NO_STOP(I2CS_mstrControl))
 268:.\Generated_Source\PSoC5/I2CS_INT.c ****                 {
 269:.\Generated_Source\PSoC5/I2CS_INT.c ****                     /* Set read complete and master halted */
 270:.\Generated_Source\PSoC5/I2CS_INT.c ****                     I2CS_mstrStatus |= (I2CS_MSTAT_XFER_HALT |
 271:.\Generated_Source\PSoC5/I2CS_INT.c ****                                                     I2CS_MSTAT_RD_CMPLT);
 272:.\Generated_Source\PSoC5/I2CS_INT.c **** 
 273:.\Generated_Source\PSoC5/I2CS_INT.c ****                     I2CS_state = I2CS_SM_MSTR_HALT;    /* Expect ReStart */
 274:.\Generated_Source\PSoC5/I2CS_INT.c ****                     I2CS_DisableInt();
 275:.\Generated_Source\PSoC5/I2CS_INT.c ****                 }
 276:.\Generated_Source\PSoC5/I2CS_INT.c ****                 else
 277:.\Generated_Source\PSoC5/I2CS_INT.c ****                 {
 278:.\Generated_Source\PSoC5/I2CS_INT.c ****                     I2CS_ENABLE_INT_ON_STOP;
 279:.\Generated_Source\PSoC5/I2CS_INT.c ****                     I2CS_NAK_AND_RECEIVE;       /* NACK and TRY to generate Stop */
 280:.\Generated_Source\PSoC5/I2CS_INT.c ****                 }
 281:.\Generated_Source\PSoC5/I2CS_INT.c ****                 break;
 282:.\Generated_Source\PSoC5/I2CS_INT.c **** 
 283:.\Generated_Source\PSoC5/I2CS_INT.c ****             default: /* This is an invalid state and should not occur */
 284:.\Generated_Source\PSoC5/I2CS_INT.c **** 
 285:.\Generated_Source\PSoC5/I2CS_INT.c ****             #if(I2CS_TIMEOUT_ENABLED)
 286:.\Generated_Source\PSoC5/I2CS_INT.c ****                 /* Exit interrupt to take chance for timeout timer to handles this case */
 287:.\Generated_Source\PSoC5/I2CS_INT.c ****                 I2CS_DisableInt();
 288:.\Generated_Source\PSoC5/I2CS_INT.c ****                 I2CS_ClearPendingInt();
 289:.\Generated_Source\PSoC5/I2CS_INT.c ****             #else
 290:.\Generated_Source\PSoC5/I2CS_INT.c ****                 /* Block execution flow: unexpected condition */
 291:.\Generated_Source\PSoC5/I2CS_INT.c ****                 CYASSERT(0u != 0u);
 292:.\Generated_Source\PSoC5/I2CS_INT.c ****             #endif /* (I2CS_TIMEOUT_ENABLED) */
ARM GAS  C:\Users\robert\AppData\Local\Temp\ccLB2jpd.s 			page 7


 293:.\Generated_Source\PSoC5/I2CS_INT.c **** 
 294:.\Generated_Source\PSoC5/I2CS_INT.c ****                 break;
 295:.\Generated_Source\PSoC5/I2CS_INT.c ****             }
 296:.\Generated_Source\PSoC5/I2CS_INT.c ****         }
 297:.\Generated_Source\PSoC5/I2CS_INT.c **** 
 298:.\Generated_Source\PSoC5/I2CS_INT.c ****         /* Catches Stop: end of transaction */
 299:.\Generated_Source\PSoC5/I2CS_INT.c ****         if(I2CS_CHECK_STOP_STS(tmpCsr))
 300:.\Generated_Source\PSoC5/I2CS_INT.c ****         {
 301:.\Generated_Source\PSoC5/I2CS_INT.c ****             I2CS_mstrStatus |= I2CS_GET_MSTAT_CMPLT;
 302:.\Generated_Source\PSoC5/I2CS_INT.c **** 
 303:.\Generated_Source\PSoC5/I2CS_INT.c ****             I2CS_DISABLE_INT_ON_STOP;
 304:.\Generated_Source\PSoC5/I2CS_INT.c ****             I2CS_state = I2CS_SM_IDLE;
 305:.\Generated_Source\PSoC5/I2CS_INT.c ****         }
 306:.\Generated_Source\PSoC5/I2CS_INT.c ****     #endif /* (I2CS_MODE_MASTER_ENABLED) */
 307:.\Generated_Source\PSoC5/I2CS_INT.c ****     }
 308:.\Generated_Source\PSoC5/I2CS_INT.c ****     else if(I2CS_CHECK_SM_SLAVE)
  51              		.loc 1 308 0
  52 001e 914B     		ldr	r3, .L20+4
  53 0020 1B78     		ldrb	r3, [r3]
  54 0022 DBB2     		uxtb	r3, r3
  55 0024 03F01003 		and	r3, r3, #16
  56 0028 DBB2     		uxtb	r3, r3
  57 002a 002B     		cmp	r3, #0
  58 002c 00F01281 		beq	.L3
 309:.\Generated_Source\PSoC5/I2CS_INT.c ****     {
 310:.\Generated_Source\PSoC5/I2CS_INT.c ****     #if(I2CS_MODE_SLAVE_ENABLED)
 311:.\Generated_Source\PSoC5/I2CS_INT.c **** 
 312:.\Generated_Source\PSoC5/I2CS_INT.c ****         if((I2CS_CHECK_STOP_STS(tmpCsr)) || /* Stop || Restart */
  59              		.loc 1 312 0
  60 0030 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
  61 0032 03F02003 		and	r3, r3, #32
  62 0036 002B     		cmp	r3, #0
  63 0038 09D1     		bne	.L4
 313:.\Generated_Source\PSoC5/I2CS_INT.c ****            (I2CS_CHECK_BYTE_COMPLETE(tmpCsr) && I2CS_CHECK_ADDRESS_STS(tmpCsr)))
  64              		.loc 1 313 0 discriminator 1
  65 003a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
  66 003c 03F00103 		and	r3, r3, #1
 312:.\Generated_Source\PSoC5/I2CS_INT.c ****            (I2CS_CHECK_BYTE_COMPLETE(tmpCsr) && I2CS_CHECK_ADDRESS_STS(tmpCsr)))
  67              		.loc 1 312 0 discriminator 1
  68 0040 002B     		cmp	r3, #0
  69 0042 24D0     		beq	.L5
  70              		.loc 1 313 0
  71 0044 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
  72 0046 03F00803 		and	r3, r3, #8
  73 004a 002B     		cmp	r3, #0
  74 004c 1FD0     		beq	.L5
  75              	.L4:
 314:.\Generated_Source\PSoC5/I2CS_INT.c ****         {
 315:.\Generated_Source\PSoC5/I2CS_INT.c ****             /* Catch end of master write transaction: use interrupt on Stop */
 316:.\Generated_Source\PSoC5/I2CS_INT.c ****             /* The Stop bit history on address phase does not have correct state */
 317:.\Generated_Source\PSoC5/I2CS_INT.c ****             if(I2CS_SM_SL_WR_DATA == I2CS_state)
  76              		.loc 1 317 0
  77 004e 854B     		ldr	r3, .L20+4
  78 0050 1B78     		ldrb	r3, [r3]
  79 0052 DBB2     		uxtb	r3, r3
  80 0054 112B     		cmp	r3, #17
  81 0056 1AD1     		bne	.L5
ARM GAS  C:\Users\robert\AppData\Local\Temp\ccLB2jpd.s 			page 8


 318:.\Generated_Source\PSoC5/I2CS_INT.c ****             {
 319:.\Generated_Source\PSoC5/I2CS_INT.c ****                 I2CS_DISABLE_INT_ON_STOP;
  82              		.loc 1 319 0
  83 0058 834A     		ldr	r2, .L20+8
  84 005a 834B     		ldr	r3, .L20+8
  85 005c 1B78     		ldrb	r3, [r3]
  86 005e DBB2     		uxtb	r3, r3
  87 0060 23F01003 		bic	r3, r3, #16
  88 0064 DBB2     		uxtb	r3, r3
  89 0066 1370     		strb	r3, [r2]
 320:.\Generated_Source\PSoC5/I2CS_INT.c **** 
 321:.\Generated_Source\PSoC5/I2CS_INT.c ****                 I2CS_slStatus &= ((uint8) ~I2CS_SSTAT_WR_BUSY);
  90              		.loc 1 321 0
  91 0068 804B     		ldr	r3, .L20+12
  92 006a 1B78     		ldrb	r3, [r3]
  93 006c DBB2     		uxtb	r3, r3
  94 006e 23F02003 		bic	r3, r3, #32
  95 0072 DAB2     		uxtb	r2, r3
  96 0074 7D4B     		ldr	r3, .L20+12
  97 0076 1A70     		strb	r2, [r3]
 322:.\Generated_Source\PSoC5/I2CS_INT.c ****                 I2CS_slStatus |= ((uint8)  I2CS_SSTAT_WR_CMPLT);
  98              		.loc 1 322 0
  99 0078 7C4B     		ldr	r3, .L20+12
 100 007a 1B78     		ldrb	r3, [r3]
 101 007c DBB2     		uxtb	r3, r3
 102 007e 43F01003 		orr	r3, r3, #16
 103 0082 DAB2     		uxtb	r2, r3
 104 0084 794B     		ldr	r3, .L20+12
 105 0086 1A70     		strb	r2, [r3]
 323:.\Generated_Source\PSoC5/I2CS_INT.c **** 
 324:.\Generated_Source\PSoC5/I2CS_INT.c ****                 I2CS_state = I2CS_SM_IDLE;
 106              		.loc 1 324 0
 107 0088 764B     		ldr	r3, .L20+4
 108 008a 1022     		movs	r2, #16
 109 008c 1A70     		strb	r2, [r3]
 110              	.L5:
 325:.\Generated_Source\PSoC5/I2CS_INT.c ****             }
 326:.\Generated_Source\PSoC5/I2CS_INT.c ****         }
 327:.\Generated_Source\PSoC5/I2CS_INT.c **** 
 328:.\Generated_Source\PSoC5/I2CS_INT.c ****         if(I2CS_CHECK_BYTE_COMPLETE(tmpCsr))
 111              		.loc 1 328 0
 112 008e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 113 0090 03F00103 		and	r3, r3, #1
 114 0094 002B     		cmp	r3, #0
 115 0096 00F0E080 		beq	.L1
 329:.\Generated_Source\PSoC5/I2CS_INT.c ****         {
 330:.\Generated_Source\PSoC5/I2CS_INT.c ****             /* The address only issued after Start or ReStart: so check the address
 331:.\Generated_Source\PSoC5/I2CS_INT.c ****                to catch these events:
 332:.\Generated_Source\PSoC5/I2CS_INT.c ****                 FF : sets an address phase with a byte_complete interrupt trigger.
 333:.\Generated_Source\PSoC5/I2CS_INT.c ****                 UDB: sets an address phase immediately after Start or ReStart. */
 334:.\Generated_Source\PSoC5/I2CS_INT.c ****             if(I2CS_CHECK_ADDRESS_STS(tmpCsr))
 116              		.loc 1 334 0
 117 009a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 118 009c 03F00803 		and	r3, r3, #8
 119 00a0 002B     		cmp	r3, #0
 120 00a2 54D0     		beq	.L7
 335:.\Generated_Source\PSoC5/I2CS_INT.c ****             {
ARM GAS  C:\Users\robert\AppData\Local\Temp\ccLB2jpd.s 			page 9


 336:.\Generated_Source\PSoC5/I2CS_INT.c ****             /* Check for software address detection */
 337:.\Generated_Source\PSoC5/I2CS_INT.c ****             #if(I2CS_SW_ADRR_DECODE)
 338:.\Generated_Source\PSoC5/I2CS_INT.c ****                 tmp8 = I2CS_GET_SLAVE_ADDR(I2CS_DATA_REG);
 339:.\Generated_Source\PSoC5/I2CS_INT.c **** 
 340:.\Generated_Source\PSoC5/I2CS_INT.c ****                 if(tmp8 == I2CS_slAddress)   /* Check for address match */
 341:.\Generated_Source\PSoC5/I2CS_INT.c ****                 {
 342:.\Generated_Source\PSoC5/I2CS_INT.c ****                     if(0u != (I2CS_DATA_REG & I2CS_READ_FLAG))
 343:.\Generated_Source\PSoC5/I2CS_INT.c ****                     {
 344:.\Generated_Source\PSoC5/I2CS_INT.c ****                         /* Place code to prepare read buffer here                  */
 345:.\Generated_Source\PSoC5/I2CS_INT.c ****                         /* `#START I2CS_SW_PREPARE_READ_BUF_interrupt` */
 346:.\Generated_Source\PSoC5/I2CS_INT.c **** 
 347:.\Generated_Source\PSoC5/I2CS_INT.c ****                         /* `#END` */
 348:.\Generated_Source\PSoC5/I2CS_INT.c **** 
 349:.\Generated_Source\PSoC5/I2CS_INT.c ****                     #ifdef I2CS_SW_PREPARE_READ_BUF_CALLBACK
 350:.\Generated_Source\PSoC5/I2CS_INT.c ****                         I2CS_SwPrepareReadBuf_Callback();
 351:.\Generated_Source\PSoC5/I2CS_INT.c ****                     #endif /* I2CS_SW_PREPARE_READ_BUF_CALLBACK */
 352:.\Generated_Source\PSoC5/I2CS_INT.c ****                         
 353:.\Generated_Source\PSoC5/I2CS_INT.c ****                         /* Prepare next operation to read, get data and place in data register */
 354:.\Generated_Source\PSoC5/I2CS_INT.c ****                         if(I2CS_slRdBufIndex < I2CS_slRdBufSize)
 355:.\Generated_Source\PSoC5/I2CS_INT.c ****                         {
 356:.\Generated_Source\PSoC5/I2CS_INT.c ****                             /* Load first data byte from array */
 357:.\Generated_Source\PSoC5/I2CS_INT.c ****                             I2CS_DATA_REG = I2CS_slRdBufPtr[I2CS_slRdBufIndex];
 358:.\Generated_Source\PSoC5/I2CS_INT.c ****                             I2CS_ACK_AND_TRANSMIT;
 359:.\Generated_Source\PSoC5/I2CS_INT.c ****                             I2CS_slRdBufIndex++;
 360:.\Generated_Source\PSoC5/I2CS_INT.c **** 
 361:.\Generated_Source\PSoC5/I2CS_INT.c ****                             I2CS_slStatus |= I2CS_SSTAT_RD_BUSY;
 362:.\Generated_Source\PSoC5/I2CS_INT.c ****                         }
 363:.\Generated_Source\PSoC5/I2CS_INT.c ****                         else    /* Overflow: provide 0xFF on bus */
 364:.\Generated_Source\PSoC5/I2CS_INT.c ****                         {
 365:.\Generated_Source\PSoC5/I2CS_INT.c ****                             I2CS_DATA_REG = I2CS_OVERFLOW_RETURN;
 366:.\Generated_Source\PSoC5/I2CS_INT.c ****                             I2CS_ACK_AND_TRANSMIT;
 367:.\Generated_Source\PSoC5/I2CS_INT.c **** 
 368:.\Generated_Source\PSoC5/I2CS_INT.c ****                             I2CS_slStatus  |= (I2CS_SSTAT_RD_BUSY |
 369:.\Generated_Source\PSoC5/I2CS_INT.c ****                                                            I2CS_SSTAT_RD_ERR_OVFL);
 370:.\Generated_Source\PSoC5/I2CS_INT.c ****                         }
 371:.\Generated_Source\PSoC5/I2CS_INT.c **** 
 372:.\Generated_Source\PSoC5/I2CS_INT.c ****                         I2CS_state = I2CS_SM_SL_RD_DATA;
 373:.\Generated_Source\PSoC5/I2CS_INT.c ****                     }
 374:.\Generated_Source\PSoC5/I2CS_INT.c ****                     else  /* Write transaction: receive 1st byte */
 375:.\Generated_Source\PSoC5/I2CS_INT.c ****                     {
 376:.\Generated_Source\PSoC5/I2CS_INT.c ****                         I2CS_ACK_AND_RECEIVE;
 377:.\Generated_Source\PSoC5/I2CS_INT.c ****                         I2CS_state = I2CS_SM_SL_WR_DATA;
 378:.\Generated_Source\PSoC5/I2CS_INT.c **** 
 379:.\Generated_Source\PSoC5/I2CS_INT.c ****                         I2CS_slStatus |= I2CS_SSTAT_WR_BUSY;
 380:.\Generated_Source\PSoC5/I2CS_INT.c ****                         I2CS_ENABLE_INT_ON_STOP;
 381:.\Generated_Source\PSoC5/I2CS_INT.c ****                     }
 382:.\Generated_Source\PSoC5/I2CS_INT.c ****                 }
 383:.\Generated_Source\PSoC5/I2CS_INT.c ****                 else
 384:.\Generated_Source\PSoC5/I2CS_INT.c ****                 {
 385:.\Generated_Source\PSoC5/I2CS_INT.c ****                     /*     Place code to compare for additional address here    */
 386:.\Generated_Source\PSoC5/I2CS_INT.c ****                     /* `#START I2CS_SW_ADDR_COMPARE_interruptStart` */
 387:.\Generated_Source\PSoC5/I2CS_INT.c **** 
 388:.\Generated_Source\PSoC5/I2CS_INT.c ****                     /* `#END` */
 389:.\Generated_Source\PSoC5/I2CS_INT.c **** 
 390:.\Generated_Source\PSoC5/I2CS_INT.c ****                 #ifdef I2CS_SW_ADDR_COMPARE_ENTRY_CALLBACK
 391:.\Generated_Source\PSoC5/I2CS_INT.c ****                     I2CS_SwAddrCompare_EntryCallback();
 392:.\Generated_Source\PSoC5/I2CS_INT.c ****                 #endif /* I2CS_SW_ADDR_COMPARE_ENTRY_CALLBACK */
ARM GAS  C:\Users\robert\AppData\Local\Temp\ccLB2jpd.s 			page 10


 393:.\Generated_Source\PSoC5/I2CS_INT.c ****                     
 394:.\Generated_Source\PSoC5/I2CS_INT.c ****                     I2CS_NAK_AND_RECEIVE;   /* NACK address */
 395:.\Generated_Source\PSoC5/I2CS_INT.c **** 
 396:.\Generated_Source\PSoC5/I2CS_INT.c ****                     /* Place code to end of condition for NACK generation here */
 397:.\Generated_Source\PSoC5/I2CS_INT.c ****                     /* `#START I2CS_SW_ADDR_COMPARE_interruptEnd`  */
 398:.\Generated_Source\PSoC5/I2CS_INT.c **** 
 399:.\Generated_Source\PSoC5/I2CS_INT.c ****                     /* `#END` */
 400:.\Generated_Source\PSoC5/I2CS_INT.c **** 
 401:.\Generated_Source\PSoC5/I2CS_INT.c ****                 #ifdef I2CS_SW_ADDR_COMPARE_EXIT_CALLBACK
 402:.\Generated_Source\PSoC5/I2CS_INT.c ****                     I2CS_SwAddrCompare_ExitCallback();
 403:.\Generated_Source\PSoC5/I2CS_INT.c ****                 #endif /* I2CS_SW_ADDR_COMPARE_EXIT_CALLBACK */
 404:.\Generated_Source\PSoC5/I2CS_INT.c ****                 }
 405:.\Generated_Source\PSoC5/I2CS_INT.c **** 
 406:.\Generated_Source\PSoC5/I2CS_INT.c ****             #else /* (I2CS_HW_ADRR_DECODE) */
 407:.\Generated_Source\PSoC5/I2CS_INT.c **** 
 408:.\Generated_Source\PSoC5/I2CS_INT.c ****                 if(0u != (I2CS_DATA_REG & I2CS_READ_FLAG))
 121              		.loc 1 408 0
 122 00a4 724B     		ldr	r3, .L20+16
 123 00a6 1B78     		ldrb	r3, [r3]
 124 00a8 DBB2     		uxtb	r3, r3
 125 00aa 03F00103 		and	r3, r3, #1
 126 00ae 002B     		cmp	r3, #0
 127 00b0 36D0     		beq	.L8
 409:.\Generated_Source\PSoC5/I2CS_INT.c ****                 {
 410:.\Generated_Source\PSoC5/I2CS_INT.c ****                     /* Place code to prepare read buffer here                  */
 411:.\Generated_Source\PSoC5/I2CS_INT.c ****                     /* `#START I2CS_HW_PREPARE_READ_BUF_interrupt` */
 412:.\Generated_Source\PSoC5/I2CS_INT.c **** 
 413:.\Generated_Source\PSoC5/I2CS_INT.c ****                     /* `#END` */
 414:.\Generated_Source\PSoC5/I2CS_INT.c ****                     
 415:.\Generated_Source\PSoC5/I2CS_INT.c ****                 #ifdef I2CS_HW_PREPARE_READ_BUF_CALLBACK
 416:.\Generated_Source\PSoC5/I2CS_INT.c ****                     I2CS_HwPrepareReadBuf_Callback();
 417:.\Generated_Source\PSoC5/I2CS_INT.c ****                 #endif /* I2CS_HW_PREPARE_READ_BUF_CALLBACK */
 418:.\Generated_Source\PSoC5/I2CS_INT.c **** 
 419:.\Generated_Source\PSoC5/I2CS_INT.c ****                     /* Prepare next operation to read, get data and place in data register */
 420:.\Generated_Source\PSoC5/I2CS_INT.c ****                     if(I2CS_slRdBufIndex < I2CS_slRdBufSize)
 128              		.loc 1 420 0
 129 00b2 704B     		ldr	r3, .L20+20
 130 00b4 1B78     		ldrb	r3, [r3]
 131 00b6 DAB2     		uxtb	r2, r3
 132 00b8 6F4B     		ldr	r3, .L20+24
 133 00ba 1B78     		ldrb	r3, [r3]
 134 00bc DBB2     		uxtb	r3, r3
 135 00be 9A42     		cmp	r2, r3
 136 00c0 1CD2     		bcs	.L9
 421:.\Generated_Source\PSoC5/I2CS_INT.c ****                     {
 422:.\Generated_Source\PSoC5/I2CS_INT.c ****                         /* Load first data byte from array */
 423:.\Generated_Source\PSoC5/I2CS_INT.c ****                         I2CS_DATA_REG = I2CS_slRdBufPtr[I2CS_slRdBufIndex];
 137              		.loc 1 423 0
 138 00c2 6B4A     		ldr	r2, .L20+16
 139 00c4 6D4B     		ldr	r3, .L20+28
 140 00c6 1B68     		ldr	r3, [r3]
 141 00c8 6A49     		ldr	r1, .L20+20
 142 00ca 0978     		ldrb	r1, [r1]
 143 00cc C9B2     		uxtb	r1, r1
 144 00ce 0B44     		add	r3, r3, r1
 145 00d0 1B78     		ldrb	r3, [r3]
 146 00d2 DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\robert\AppData\Local\Temp\ccLB2jpd.s 			page 11


 147 00d4 1370     		strb	r3, [r2]
 424:.\Generated_Source\PSoC5/I2CS_INT.c ****                         I2CS_ACK_AND_TRANSMIT;
 148              		.loc 1 424 0
 149 00d6 624B     		ldr	r3, .L20
 150 00d8 1422     		movs	r2, #20
 151 00da 1A70     		strb	r2, [r3]
 425:.\Generated_Source\PSoC5/I2CS_INT.c ****                         I2CS_slRdBufIndex++;
 152              		.loc 1 425 0
 153 00dc 654B     		ldr	r3, .L20+20
 154 00de 1B78     		ldrb	r3, [r3]
 155 00e0 DBB2     		uxtb	r3, r3
 156 00e2 0133     		adds	r3, r3, #1
 157 00e4 DAB2     		uxtb	r2, r3
 158 00e6 634B     		ldr	r3, .L20+20
 159 00e8 1A70     		strb	r2, [r3]
 426:.\Generated_Source\PSoC5/I2CS_INT.c **** 
 427:.\Generated_Source\PSoC5/I2CS_INT.c ****                         I2CS_slStatus |= I2CS_SSTAT_RD_BUSY;
 160              		.loc 1 427 0
 161 00ea 604B     		ldr	r3, .L20+12
 162 00ec 1B78     		ldrb	r3, [r3]
 163 00ee DBB2     		uxtb	r3, r3
 164 00f0 43F00203 		orr	r3, r3, #2
 165 00f4 DAB2     		uxtb	r2, r3
 166 00f6 5D4B     		ldr	r3, .L20+12
 167 00f8 1A70     		strb	r2, [r3]
 168 00fa 0DE0     		b	.L10
 169              	.L9:
 428:.\Generated_Source\PSoC5/I2CS_INT.c ****                     }
 429:.\Generated_Source\PSoC5/I2CS_INT.c ****                     else    /* Overflow: provide 0xFF on bus */
 430:.\Generated_Source\PSoC5/I2CS_INT.c ****                     {
 431:.\Generated_Source\PSoC5/I2CS_INT.c ****                         I2CS_DATA_REG = I2CS_OVERFLOW_RETURN;
 170              		.loc 1 431 0
 171 00fc 5C4B     		ldr	r3, .L20+16
 172 00fe FF22     		movs	r2, #255
 173 0100 1A70     		strb	r2, [r3]
 432:.\Generated_Source\PSoC5/I2CS_INT.c ****                         I2CS_ACK_AND_TRANSMIT;
 174              		.loc 1 432 0
 175 0102 574B     		ldr	r3, .L20
 176 0104 1422     		movs	r2, #20
 177 0106 1A70     		strb	r2, [r3]
 433:.\Generated_Source\PSoC5/I2CS_INT.c **** 
 434:.\Generated_Source\PSoC5/I2CS_INT.c ****                         I2CS_slStatus  |= (I2CS_SSTAT_RD_BUSY |
 178              		.loc 1 434 0
 179 0108 584B     		ldr	r3, .L20+12
 180 010a 1B78     		ldrb	r3, [r3]
 181 010c DBB2     		uxtb	r3, r3
 182 010e 43F00603 		orr	r3, r3, #6
 183 0112 DAB2     		uxtb	r2, r3
 184 0114 554B     		ldr	r3, .L20+12
 185 0116 1A70     		strb	r2, [r3]
 186              	.L10:
 435:.\Generated_Source\PSoC5/I2CS_INT.c ****                                                        I2CS_SSTAT_RD_ERR_OVFL);
 436:.\Generated_Source\PSoC5/I2CS_INT.c ****                     }
 437:.\Generated_Source\PSoC5/I2CS_INT.c **** 
 438:.\Generated_Source\PSoC5/I2CS_INT.c ****                     I2CS_state = I2CS_SM_SL_RD_DATA;
 187              		.loc 1 438 0
 188 0118 524B     		ldr	r3, .L20+4
ARM GAS  C:\Users\robert\AppData\Local\Temp\ccLB2jpd.s 			page 12


 189 011a 1222     		movs	r2, #18
 190 011c 1A70     		strb	r2, [r3]
 191 011e 9CE0     		b	.L1
 192              	.L8:
 439:.\Generated_Source\PSoC5/I2CS_INT.c ****                 }
 440:.\Generated_Source\PSoC5/I2CS_INT.c ****                 else  /* Write transaction: receive 1st byte */
 441:.\Generated_Source\PSoC5/I2CS_INT.c ****                 {
 442:.\Generated_Source\PSoC5/I2CS_INT.c ****                     I2CS_ACK_AND_RECEIVE;
 193              		.loc 1 442 0
 194 0120 4F4B     		ldr	r3, .L20
 195 0122 1022     		movs	r2, #16
 196 0124 1A70     		strb	r2, [r3]
 443:.\Generated_Source\PSoC5/I2CS_INT.c ****                     I2CS_state = I2CS_SM_SL_WR_DATA;
 197              		.loc 1 443 0
 198 0126 4F4B     		ldr	r3, .L20+4
 199 0128 1122     		movs	r2, #17
 200 012a 1A70     		strb	r2, [r3]
 444:.\Generated_Source\PSoC5/I2CS_INT.c **** 
 445:.\Generated_Source\PSoC5/I2CS_INT.c ****                     I2CS_slStatus |= I2CS_SSTAT_WR_BUSY;
 201              		.loc 1 445 0
 202 012c 4F4B     		ldr	r3, .L20+12
 203 012e 1B78     		ldrb	r3, [r3]
 204 0130 DBB2     		uxtb	r3, r3
 205 0132 43F02003 		orr	r3, r3, #32
 206 0136 DAB2     		uxtb	r2, r3
 207 0138 4C4B     		ldr	r3, .L20+12
 208 013a 1A70     		strb	r2, [r3]
 446:.\Generated_Source\PSoC5/I2CS_INT.c ****                     I2CS_ENABLE_INT_ON_STOP;
 209              		.loc 1 446 0
 210 013c 4A4A     		ldr	r2, .L20+8
 211 013e 4A4B     		ldr	r3, .L20+8
 212 0140 1B78     		ldrb	r3, [r3]
 213 0142 DBB2     		uxtb	r3, r3
 214 0144 43F01003 		orr	r3, r3, #16
 215 0148 DBB2     		uxtb	r3, r3
 216 014a 1370     		strb	r3, [r2]
 217 014c 85E0     		b	.L1
 218              	.L7:
 447:.\Generated_Source\PSoC5/I2CS_INT.c ****                 }
 448:.\Generated_Source\PSoC5/I2CS_INT.c **** 
 449:.\Generated_Source\PSoC5/I2CS_INT.c ****             #endif /* (I2CS_SW_ADRR_DECODE) */
 450:.\Generated_Source\PSoC5/I2CS_INT.c ****             }
 451:.\Generated_Source\PSoC5/I2CS_INT.c ****             /* Data states */
 452:.\Generated_Source\PSoC5/I2CS_INT.c ****             /* Data master writes into slave */
 453:.\Generated_Source\PSoC5/I2CS_INT.c ****             else if(I2CS_state == I2CS_SM_SL_WR_DATA)
 219              		.loc 1 453 0
 220 014e 454B     		ldr	r3, .L20+4
 221 0150 1B78     		ldrb	r3, [r3]
 222 0152 DBB2     		uxtb	r3, r3
 223 0154 112B     		cmp	r3, #17
 224 0156 29D1     		bne	.L12
 454:.\Generated_Source\PSoC5/I2CS_INT.c ****             {
 455:.\Generated_Source\PSoC5/I2CS_INT.c ****                 if(I2CS_slWrBufIndex < I2CS_slWrBufSize)
 225              		.loc 1 455 0
 226 0158 494B     		ldr	r3, .L20+32
 227 015a 1B78     		ldrb	r3, [r3]
 228 015c DAB2     		uxtb	r2, r3
ARM GAS  C:\Users\robert\AppData\Local\Temp\ccLB2jpd.s 			page 13


 229 015e 494B     		ldr	r3, .L20+36
 230 0160 1B78     		ldrb	r3, [r3]
 231 0162 DBB2     		uxtb	r3, r3
 232 0164 9A42     		cmp	r2, r3
 233 0166 15D2     		bcs	.L13
 456:.\Generated_Source\PSoC5/I2CS_INT.c ****                 {
 457:.\Generated_Source\PSoC5/I2CS_INT.c ****                     tmp8 = I2CS_DATA_REG;
 234              		.loc 1 457 0
 235 0168 414B     		ldr	r3, .L20+16
 236 016a 1B78     		ldrb	r3, [r3]
 237 016c BB71     		strb	r3, [r7, #6]
 458:.\Generated_Source\PSoC5/I2CS_INT.c ****                     I2CS_ACK_AND_RECEIVE;
 238              		.loc 1 458 0
 239 016e 3C4B     		ldr	r3, .L20
 240 0170 1022     		movs	r2, #16
 241 0172 1A70     		strb	r2, [r3]
 459:.\Generated_Source\PSoC5/I2CS_INT.c ****                     I2CS_slWrBufPtr[I2CS_slWrBufIndex] = tmp8;
 242              		.loc 1 459 0
 243 0174 444B     		ldr	r3, .L20+40
 244 0176 1B68     		ldr	r3, [r3]
 245 0178 414A     		ldr	r2, .L20+32
 246 017a 1278     		ldrb	r2, [r2]
 247 017c D2B2     		uxtb	r2, r2
 248 017e 1344     		add	r3, r3, r2
 249 0180 BA79     		ldrb	r2, [r7, #6]
 250 0182 1A70     		strb	r2, [r3]
 460:.\Generated_Source\PSoC5/I2CS_INT.c ****                     I2CS_slWrBufIndex++;
 251              		.loc 1 460 0
 252 0184 3E4B     		ldr	r3, .L20+32
 253 0186 1B78     		ldrb	r3, [r3]
 254 0188 DBB2     		uxtb	r3, r3
 255 018a 0133     		adds	r3, r3, #1
 256 018c DAB2     		uxtb	r2, r3
 257 018e 3C4B     		ldr	r3, .L20+32
 258 0190 1A70     		strb	r2, [r3]
 259 0192 62E0     		b	.L1
 260              	.L13:
 461:.\Generated_Source\PSoC5/I2CS_INT.c ****                 }
 462:.\Generated_Source\PSoC5/I2CS_INT.c ****                 else  /* of array: complete write, send NACK */
 463:.\Generated_Source\PSoC5/I2CS_INT.c ****                 {
 464:.\Generated_Source\PSoC5/I2CS_INT.c ****                     I2CS_NAK_AND_RECEIVE;
 261              		.loc 1 464 0
 262 0194 324B     		ldr	r3, .L20
 263 0196 0022     		movs	r2, #0
 264 0198 1A70     		strb	r2, [r3]
 465:.\Generated_Source\PSoC5/I2CS_INT.c **** 
 466:.\Generated_Source\PSoC5/I2CS_INT.c ****                     I2CS_slStatus |= I2CS_SSTAT_WR_ERR_OVFL;
 265              		.loc 1 466 0
 266 019a 344B     		ldr	r3, .L20+12
 267 019c 1B78     		ldrb	r3, [r3]
 268 019e DBB2     		uxtb	r3, r3
 269 01a0 43F04003 		orr	r3, r3, #64
 270 01a4 DAB2     		uxtb	r2, r3
 271 01a6 314B     		ldr	r3, .L20+12
 272 01a8 1A70     		strb	r2, [r3]
 273 01aa 56E0     		b	.L1
 274              	.L12:
ARM GAS  C:\Users\robert\AppData\Local\Temp\ccLB2jpd.s 			page 14


 467:.\Generated_Source\PSoC5/I2CS_INT.c ****                 }
 468:.\Generated_Source\PSoC5/I2CS_INT.c ****             }
 469:.\Generated_Source\PSoC5/I2CS_INT.c ****             /* Data master reads from slave */
 470:.\Generated_Source\PSoC5/I2CS_INT.c ****             else if(I2CS_state == I2CS_SM_SL_RD_DATA)
 275              		.loc 1 470 0
 276 01ac 2D4B     		ldr	r3, .L20+4
 277 01ae 1B78     		ldrb	r3, [r3]
 278 01b0 DBB2     		uxtb	r3, r3
 279 01b2 122B     		cmp	r3, #18
 280 01b4 4AD1     		bne	.L15
 471:.\Generated_Source\PSoC5/I2CS_INT.c ****             {
 472:.\Generated_Source\PSoC5/I2CS_INT.c ****                 if(I2CS_CHECK_DATA_ACK(tmpCsr))
 281              		.loc 1 472 0
 282 01b6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 283 01b8 03F00203 		and	r3, r3, #2
 284 01bc 002B     		cmp	r3, #0
 285 01be 2BD1     		bne	.L16
 473:.\Generated_Source\PSoC5/I2CS_INT.c ****                 {
 474:.\Generated_Source\PSoC5/I2CS_INT.c ****                     if(I2CS_slRdBufIndex < I2CS_slRdBufSize)
 286              		.loc 1 474 0
 287 01c0 2C4B     		ldr	r3, .L20+20
 288 01c2 1B78     		ldrb	r3, [r3]
 289 01c4 DAB2     		uxtb	r2, r3
 290 01c6 2C4B     		ldr	r3, .L20+24
 291 01c8 1B78     		ldrb	r3, [r3]
 292 01ca DBB2     		uxtb	r3, r3
 293 01cc 9A42     		cmp	r2, r3
 294 01ce 14D2     		bcs	.L17
 475:.\Generated_Source\PSoC5/I2CS_INT.c ****                     {
 476:.\Generated_Source\PSoC5/I2CS_INT.c ****                          /* Get data from array */
 477:.\Generated_Source\PSoC5/I2CS_INT.c ****                         I2CS_DATA_REG = I2CS_slRdBufPtr[I2CS_slRdBufIndex];
 295              		.loc 1 477 0
 296 01d0 274A     		ldr	r2, .L20+16
 297 01d2 2A4B     		ldr	r3, .L20+28
 298 01d4 1B68     		ldr	r3, [r3]
 299 01d6 2749     		ldr	r1, .L20+20
 300 01d8 0978     		ldrb	r1, [r1]
 301 01da C9B2     		uxtb	r1, r1
 302 01dc 0B44     		add	r3, r3, r1
 303 01de 1B78     		ldrb	r3, [r3]
 304 01e0 DBB2     		uxtb	r3, r3
 305 01e2 1370     		strb	r3, [r2]
 478:.\Generated_Source\PSoC5/I2CS_INT.c ****                         I2CS_TRANSMIT_DATA;
 306              		.loc 1 478 0
 307 01e4 1E4B     		ldr	r3, .L20
 308 01e6 0422     		movs	r2, #4
 309 01e8 1A70     		strb	r2, [r3]
 479:.\Generated_Source\PSoC5/I2CS_INT.c ****                         I2CS_slRdBufIndex++;
 310              		.loc 1 479 0
 311 01ea 224B     		ldr	r3, .L20+20
 312 01ec 1B78     		ldrb	r3, [r3]
 313 01ee DBB2     		uxtb	r3, r3
 314 01f0 0133     		adds	r3, r3, #1
 315 01f2 DAB2     		uxtb	r2, r3
 316 01f4 1F4B     		ldr	r3, .L20+20
 317 01f6 1A70     		strb	r2, [r3]
 318 01f8 2FE0     		b	.L1
ARM GAS  C:\Users\robert\AppData\Local\Temp\ccLB2jpd.s 			page 15


 319              	.L17:
 480:.\Generated_Source\PSoC5/I2CS_INT.c ****                     }
 481:.\Generated_Source\PSoC5/I2CS_INT.c ****                     else   /* Overflow: provide 0xFF on bus */
 482:.\Generated_Source\PSoC5/I2CS_INT.c ****                     {
 483:.\Generated_Source\PSoC5/I2CS_INT.c ****                         I2CS_DATA_REG = I2CS_OVERFLOW_RETURN;
 320              		.loc 1 483 0
 321 01fa 1D4B     		ldr	r3, .L20+16
 322 01fc FF22     		movs	r2, #255
 323 01fe 1A70     		strb	r2, [r3]
 484:.\Generated_Source\PSoC5/I2CS_INT.c ****                         I2CS_TRANSMIT_DATA;
 324              		.loc 1 484 0
 325 0200 174B     		ldr	r3, .L20
 326 0202 0422     		movs	r2, #4
 327 0204 1A70     		strb	r2, [r3]
 485:.\Generated_Source\PSoC5/I2CS_INT.c **** 
 486:.\Generated_Source\PSoC5/I2CS_INT.c ****                         I2CS_slStatus |= I2CS_SSTAT_RD_ERR_OVFL;
 328              		.loc 1 486 0
 329 0206 194B     		ldr	r3, .L20+12
 330 0208 1B78     		ldrb	r3, [r3]
 331 020a DBB2     		uxtb	r3, r3
 332 020c 43F00403 		orr	r3, r3, #4
 333 0210 DAB2     		uxtb	r2, r3
 334 0212 164B     		ldr	r3, .L20+12
 335 0214 1A70     		strb	r2, [r3]
 336 0216 20E0     		b	.L1
 337              	.L16:
 487:.\Generated_Source\PSoC5/I2CS_INT.c ****                     }
 488:.\Generated_Source\PSoC5/I2CS_INT.c ****                 }
 489:.\Generated_Source\PSoC5/I2CS_INT.c ****                 else  /* Last byte was NACKed: read complete */
 490:.\Generated_Source\PSoC5/I2CS_INT.c ****                 {
 491:.\Generated_Source\PSoC5/I2CS_INT.c ****                     /* Only NACK appears on bus */
 492:.\Generated_Source\PSoC5/I2CS_INT.c ****                     I2CS_DATA_REG = I2CS_OVERFLOW_RETURN;
 338              		.loc 1 492 0
 339 0218 154B     		ldr	r3, .L20+16
 340 021a FF22     		movs	r2, #255
 341 021c 1A70     		strb	r2, [r3]
 493:.\Generated_Source\PSoC5/I2CS_INT.c ****                     I2CS_NAK_AND_TRANSMIT;
 342              		.loc 1 493 0
 343 021e 104B     		ldr	r3, .L20
 344 0220 0022     		movs	r2, #0
 345 0222 1A70     		strb	r2, [r3]
 494:.\Generated_Source\PSoC5/I2CS_INT.c **** 
 495:.\Generated_Source\PSoC5/I2CS_INT.c ****                     I2CS_slStatus &= ((uint8) ~I2CS_SSTAT_RD_BUSY);
 346              		.loc 1 495 0
 347 0224 114B     		ldr	r3, .L20+12
 348 0226 1B78     		ldrb	r3, [r3]
 349 0228 DBB2     		uxtb	r3, r3
 350 022a 23F00203 		bic	r3, r3, #2
 351 022e DAB2     		uxtb	r2, r3
 352 0230 0E4B     		ldr	r3, .L20+12
 353 0232 1A70     		strb	r2, [r3]
 496:.\Generated_Source\PSoC5/I2CS_INT.c ****                     I2CS_slStatus |= ((uint8)  I2CS_SSTAT_RD_CMPLT);
 354              		.loc 1 496 0
 355 0234 0D4B     		ldr	r3, .L20+12
 356 0236 1B78     		ldrb	r3, [r3]
 357 0238 DBB2     		uxtb	r3, r3
 358 023a 43F00103 		orr	r3, r3, #1
ARM GAS  C:\Users\robert\AppData\Local\Temp\ccLB2jpd.s 			page 16


 359 023e DAB2     		uxtb	r2, r3
 360 0240 0A4B     		ldr	r3, .L20+12
 361 0242 1A70     		strb	r2, [r3]
 497:.\Generated_Source\PSoC5/I2CS_INT.c **** 
 498:.\Generated_Source\PSoC5/I2CS_INT.c ****                     I2CS_state = I2CS_SM_IDLE;
 362              		.loc 1 498 0
 363 0244 074B     		ldr	r3, .L20+4
 364 0246 1022     		movs	r2, #16
 365 0248 1A70     		strb	r2, [r3]
 366 024a 06E0     		b	.L1
 367              	.L15:
 499:.\Generated_Source\PSoC5/I2CS_INT.c ****                 }
 500:.\Generated_Source\PSoC5/I2CS_INT.c ****             }
 501:.\Generated_Source\PSoC5/I2CS_INT.c ****             else
 502:.\Generated_Source\PSoC5/I2CS_INT.c ****             {
 503:.\Generated_Source\PSoC5/I2CS_INT.c ****             #if(I2CS_TIMEOUT_ENABLED)
 504:.\Generated_Source\PSoC5/I2CS_INT.c ****                 /* Exit interrupt to take chance for timeout timer to handle this case */
 505:.\Generated_Source\PSoC5/I2CS_INT.c ****                 I2CS_DisableInt();
 506:.\Generated_Source\PSoC5/I2CS_INT.c ****                 I2CS_ClearPendingInt();
 507:.\Generated_Source\PSoC5/I2CS_INT.c ****             #else
 508:.\Generated_Source\PSoC5/I2CS_INT.c ****                 /* Block execution flow: unexpected condition */
 509:.\Generated_Source\PSoC5/I2CS_INT.c ****                 CYASSERT(0u != 0u);
 368              		.loc 1 509 0 discriminator 1
 369 024c 0020     		movs	r0, #0
 370 024e FFF7FEFF 		bl	CyHalt
 371 0252 02E0     		b	.L1
 372              	.L3:
 510:.\Generated_Source\PSoC5/I2CS_INT.c ****             #endif /* (I2CS_TIMEOUT_ENABLED) */
 511:.\Generated_Source\PSoC5/I2CS_INT.c ****             }
 512:.\Generated_Source\PSoC5/I2CS_INT.c ****         }
 513:.\Generated_Source\PSoC5/I2CS_INT.c ****     #endif /* (I2CS_MODE_SLAVE_ENABLED) */
 514:.\Generated_Source\PSoC5/I2CS_INT.c ****     }
 515:.\Generated_Source\PSoC5/I2CS_INT.c ****     else
 516:.\Generated_Source\PSoC5/I2CS_INT.c ****     {
 517:.\Generated_Source\PSoC5/I2CS_INT.c ****         /* The FSM skips master and slave processing: return to IDLE */
 518:.\Generated_Source\PSoC5/I2CS_INT.c ****         I2CS_state = I2CS_SM_IDLE;
 373              		.loc 1 518 0
 374 0254 034B     		ldr	r3, .L20+4
 375 0256 1022     		movs	r2, #16
 376 0258 1A70     		strb	r2, [r3]
 377              	.L1:
 519:.\Generated_Source\PSoC5/I2CS_INT.c ****     }
 520:.\Generated_Source\PSoC5/I2CS_INT.c **** 
 521:.\Generated_Source\PSoC5/I2CS_INT.c **** #ifdef I2CS_ISR_EXIT_CALLBACK
 522:.\Generated_Source\PSoC5/I2CS_INT.c ****     I2CS_ISR_ExitCallback();
 523:.\Generated_Source\PSoC5/I2CS_INT.c **** #endif /* I2CS_ISR_EXIT_CALLBACK */    
 524:.\Generated_Source\PSoC5/I2CS_INT.c **** }
 378              		.loc 1 524 0
 379 025a 0837     		adds	r7, r7, #8
 380              		.cfi_def_cfa_offset 8
 381 025c BD46     		mov	sp, r7
 382              		.cfi_def_cfa_register 13
 383              		@ sp needed
 384 025e 80BD     		pop	{r7, pc}
 385              	.L21:
 386              		.align	2
 387              	.L20:
ARM GAS  C:\Users\robert\AppData\Local\Temp\ccLB2jpd.s 			page 17


 388 0260 D7490040 		.word	1073760727
 389 0264 00000000 		.word	I2CS_state
 390 0268 D6490040 		.word	1073760726
 391 026c 00000000 		.word	I2CS_slStatus
 392 0270 D8490040 		.word	1073760728
 393 0274 00000000 		.word	I2CS_slRdBufIndex
 394 0278 00000000 		.word	I2CS_slRdBufSize
 395 027c 00000000 		.word	I2CS_slRdBufPtr
 396 0280 00000000 		.word	I2CS_slWrBufIndex
 397 0284 00000000 		.word	I2CS_slWrBufSize
 398 0288 00000000 		.word	I2CS_slWrBufPtr
 399              		.cfi_endproc
 400              	.LFE0:
 401              		.size	I2CS_ISR, .-I2CS_ISR
 402              		.text
 403              	.Letext0:
 404              		.file 2 ".\\Generated_Source\\PSoC5\\cytypes.h"
 405              		.file 3 ".\\Generated_Source\\PSoC5\\I2CS_PVT.h"
 406              		.section	.debug_info,"",%progbits
 407              	.Ldebug_info0:
 408 0000 31010000 		.4byte	0x131
 409 0004 0400     		.2byte	0x4
 410 0006 00000000 		.4byte	.Ldebug_abbrev0
 411 000a 04       		.byte	0x4
 412 000b 01       		.uleb128 0x1
 413 000c 68010000 		.4byte	.LASF25
 414 0010 01       		.byte	0x1
 415 0011 15020000 		.4byte	.LASF26
 416 0015 7F000000 		.4byte	.LASF27
 417 0019 00000000 		.4byte	.Ldebug_ranges0+0
 418 001d 00000000 		.4byte	0
 419 0021 00000000 		.4byte	.Ldebug_line0
 420 0025 02       		.uleb128 0x2
 421 0026 01       		.byte	0x1
 422 0027 06       		.byte	0x6
 423 0028 34010000 		.4byte	.LASF0
 424 002c 02       		.uleb128 0x2
 425 002d 01       		.byte	0x1
 426 002e 08       		.byte	0x8
 427 002f D8000000 		.4byte	.LASF1
 428 0033 02       		.uleb128 0x2
 429 0034 02       		.byte	0x2
 430 0035 05       		.byte	0x5
 431 0036 F6010000 		.4byte	.LASF2
 432 003a 02       		.uleb128 0x2
 433 003b 02       		.byte	0x2
 434 003c 07       		.byte	0x7
 435 003d 21010000 		.4byte	.LASF3
 436 0041 02       		.uleb128 0x2
 437 0042 04       		.byte	0x4
 438 0043 05       		.byte	0x5
 439 0044 F6000000 		.4byte	.LASF4
 440 0048 02       		.uleb128 0x2
 441 0049 04       		.byte	0x4
 442 004a 07       		.byte	0x7
 443 004b 37000000 		.4byte	.LASF5
 444 004f 02       		.uleb128 0x2
ARM GAS  C:\Users\robert\AppData\Local\Temp\ccLB2jpd.s 			page 18


 445 0050 08       		.byte	0x8
 446 0051 05       		.byte	0x5
 447 0052 00000000 		.4byte	.LASF6
 448 0056 02       		.uleb128 0x2
 449 0057 08       		.byte	0x8
 450 0058 07       		.byte	0x7
 451 0059 49000000 		.4byte	.LASF7
 452 005d 03       		.uleb128 0x3
 453 005e 04       		.byte	0x4
 454 005f 05       		.byte	0x5
 455 0060 696E7400 		.ascii	"int\000"
 456 0064 02       		.uleb128 0x2
 457 0065 04       		.byte	0x4
 458 0066 07       		.byte	0x7
 459 0067 0E000000 		.4byte	.LASF8
 460 006b 04       		.uleb128 0x4
 461 006c 31000000 		.4byte	.LASF12
 462 0070 02       		.byte	0x2
 463 0071 9201     		.2byte	0x192
 464 0073 2C000000 		.4byte	0x2c
 465 0077 02       		.uleb128 0x2
 466 0078 04       		.byte	0x4
 467 0079 04       		.byte	0x4
 468 007a 62010000 		.4byte	.LASF9
 469 007e 02       		.uleb128 0x2
 470 007f 08       		.byte	0x8
 471 0080 04       		.byte	0x4
 472 0081 08010000 		.4byte	.LASF10
 473 0085 02       		.uleb128 0x2
 474 0086 01       		.byte	0x1
 475 0087 08       		.byte	0x8
 476 0088 E6000000 		.4byte	.LASF11
 477 008c 04       		.uleb128 0x4
 478 008d 00020000 		.4byte	.LASF13
 479 0091 02       		.byte	0x2
 480 0092 3C02     		.2byte	0x23c
 481 0094 98000000 		.4byte	0x98
 482 0098 05       		.uleb128 0x5
 483 0099 6B000000 		.4byte	0x6b
 484 009d 02       		.uleb128 0x2
 485 009e 04       		.byte	0x4
 486 009f 07       		.byte	0x7
 487 00a0 05020000 		.4byte	.LASF14
 488 00a4 06       		.uleb128 0x6
 489 00a5 FF000000 		.4byte	.LASF28
 490 00a9 01       		.byte	0x1
 491 00aa 2E       		.byte	0x2e
 492 00ab 00000000 		.4byte	.LFB0
 493 00af 8C020000 		.4byte	.LFE0-.LFB0
 494 00b3 01       		.uleb128 0x1
 495 00b4 9C       		.byte	0x9c
 496 00b5 D6000000 		.4byte	0xd6
 497 00b9 07       		.uleb128 0x7
 498 00ba 2C000000 		.4byte	.LASF15
 499 00be 01       		.byte	0x1
 500 00bf 31       		.byte	0x31
 501 00c0 6B000000 		.4byte	0x6b
ARM GAS  C:\Users\robert\AppData\Local\Temp\ccLB2jpd.s 			page 19


 502 00c4 02       		.uleb128 0x2
 503 00c5 91       		.byte	0x91
 504 00c6 76       		.sleb128 -10
 505 00c7 07       		.uleb128 0x7
 506 00c8 0E020000 		.4byte	.LASF16
 507 00cc 01       		.byte	0x1
 508 00cd 34       		.byte	0x34
 509 00ce 6B000000 		.4byte	0x6b
 510 00d2 02       		.uleb128 0x2
 511 00d3 91       		.byte	0x91
 512 00d4 77       		.sleb128 -9
 513 00d5 00       		.byte	0
 514 00d6 08       		.uleb128 0x8
 515 00d7 EB000000 		.4byte	.LASF17
 516 00db 03       		.byte	0x3
 517 00dc 23       		.byte	0x23
 518 00dd 98000000 		.4byte	0x98
 519 00e1 08       		.uleb128 0x8
 520 00e2 60000000 		.4byte	.LASF18
 521 00e6 03       		.byte	0x3
 522 00e7 38       		.byte	0x38
 523 00e8 98000000 		.4byte	0x98
 524 00ec 08       		.uleb128 0x8
 525 00ed C8000000 		.4byte	.LASF19
 526 00f1 03       		.byte	0x3
 527 00f2 3B       		.byte	0x3b
 528 00f3 F7000000 		.4byte	0xf7
 529 00f7 09       		.uleb128 0x9
 530 00f8 04       		.byte	0x4
 531 00f9 98000000 		.4byte	0x98
 532 00fd 08       		.uleb128 0x8
 533 00fe 6E000000 		.4byte	.LASF20
 534 0102 03       		.byte	0x3
 535 0103 3C       		.byte	0x3c
 536 0104 98000000 		.4byte	0x98
 537 0108 08       		.uleb128 0x8
 538 0109 40010000 		.4byte	.LASF21
 539 010d 03       		.byte	0x3
 540 010e 3D       		.byte	0x3d
 541 010f 98000000 		.4byte	0x98
 542 0113 08       		.uleb128 0x8
 543 0114 52010000 		.4byte	.LASF22
 544 0118 03       		.byte	0x3
 545 0119 40       		.byte	0x40
 546 011a F7000000 		.4byte	0xf7
 547 011e 08       		.uleb128 0x8
 548 011f 1B000000 		.4byte	.LASF23
 549 0123 03       		.byte	0x3
 550 0124 41       		.byte	0x41
 551 0125 98000000 		.4byte	0x98
 552 0129 08       		.uleb128 0x8
 553 012a 0F010000 		.4byte	.LASF24
 554 012e 03       		.byte	0x3
 555 012f 42       		.byte	0x42
 556 0130 98000000 		.4byte	0x98
 557 0134 00       		.byte	0
 558              		.section	.debug_abbrev,"",%progbits
ARM GAS  C:\Users\robert\AppData\Local\Temp\ccLB2jpd.s 			page 20


 559              	.Ldebug_abbrev0:
 560 0000 01       		.uleb128 0x1
 561 0001 11       		.uleb128 0x11
 562 0002 01       		.byte	0x1
 563 0003 25       		.uleb128 0x25
 564 0004 0E       		.uleb128 0xe
 565 0005 13       		.uleb128 0x13
 566 0006 0B       		.uleb128 0xb
 567 0007 03       		.uleb128 0x3
 568 0008 0E       		.uleb128 0xe
 569 0009 1B       		.uleb128 0x1b
 570 000a 0E       		.uleb128 0xe
 571 000b 55       		.uleb128 0x55
 572 000c 17       		.uleb128 0x17
 573 000d 11       		.uleb128 0x11
 574 000e 01       		.uleb128 0x1
 575 000f 10       		.uleb128 0x10
 576 0010 17       		.uleb128 0x17
 577 0011 00       		.byte	0
 578 0012 00       		.byte	0
 579 0013 02       		.uleb128 0x2
 580 0014 24       		.uleb128 0x24
 581 0015 00       		.byte	0
 582 0016 0B       		.uleb128 0xb
 583 0017 0B       		.uleb128 0xb
 584 0018 3E       		.uleb128 0x3e
 585 0019 0B       		.uleb128 0xb
 586 001a 03       		.uleb128 0x3
 587 001b 0E       		.uleb128 0xe
 588 001c 00       		.byte	0
 589 001d 00       		.byte	0
 590 001e 03       		.uleb128 0x3
 591 001f 24       		.uleb128 0x24
 592 0020 00       		.byte	0
 593 0021 0B       		.uleb128 0xb
 594 0022 0B       		.uleb128 0xb
 595 0023 3E       		.uleb128 0x3e
 596 0024 0B       		.uleb128 0xb
 597 0025 03       		.uleb128 0x3
 598 0026 08       		.uleb128 0x8
 599 0027 00       		.byte	0
 600 0028 00       		.byte	0
 601 0029 04       		.uleb128 0x4
 602 002a 16       		.uleb128 0x16
 603 002b 00       		.byte	0
 604 002c 03       		.uleb128 0x3
 605 002d 0E       		.uleb128 0xe
 606 002e 3A       		.uleb128 0x3a
 607 002f 0B       		.uleb128 0xb
 608 0030 3B       		.uleb128 0x3b
 609 0031 05       		.uleb128 0x5
 610 0032 49       		.uleb128 0x49
 611 0033 13       		.uleb128 0x13
 612 0034 00       		.byte	0
 613 0035 00       		.byte	0
 614 0036 05       		.uleb128 0x5
 615 0037 35       		.uleb128 0x35
ARM GAS  C:\Users\robert\AppData\Local\Temp\ccLB2jpd.s 			page 21


 616 0038 00       		.byte	0
 617 0039 49       		.uleb128 0x49
 618 003a 13       		.uleb128 0x13
 619 003b 00       		.byte	0
 620 003c 00       		.byte	0
 621 003d 06       		.uleb128 0x6
 622 003e 2E       		.uleb128 0x2e
 623 003f 01       		.byte	0x1
 624 0040 3F       		.uleb128 0x3f
 625 0041 19       		.uleb128 0x19
 626 0042 03       		.uleb128 0x3
 627 0043 0E       		.uleb128 0xe
 628 0044 3A       		.uleb128 0x3a
 629 0045 0B       		.uleb128 0xb
 630 0046 3B       		.uleb128 0x3b
 631 0047 0B       		.uleb128 0xb
 632 0048 27       		.uleb128 0x27
 633 0049 19       		.uleb128 0x19
 634 004a 11       		.uleb128 0x11
 635 004b 01       		.uleb128 0x1
 636 004c 12       		.uleb128 0x12
 637 004d 06       		.uleb128 0x6
 638 004e 40       		.uleb128 0x40
 639 004f 18       		.uleb128 0x18
 640 0050 9642     		.uleb128 0x2116
 641 0052 19       		.uleb128 0x19
 642 0053 01       		.uleb128 0x1
 643 0054 13       		.uleb128 0x13
 644 0055 00       		.byte	0
 645 0056 00       		.byte	0
 646 0057 07       		.uleb128 0x7
 647 0058 34       		.uleb128 0x34
 648 0059 00       		.byte	0
 649 005a 03       		.uleb128 0x3
 650 005b 0E       		.uleb128 0xe
 651 005c 3A       		.uleb128 0x3a
 652 005d 0B       		.uleb128 0xb
 653 005e 3B       		.uleb128 0x3b
 654 005f 0B       		.uleb128 0xb
 655 0060 49       		.uleb128 0x49
 656 0061 13       		.uleb128 0x13
 657 0062 02       		.uleb128 0x2
 658 0063 18       		.uleb128 0x18
 659 0064 00       		.byte	0
 660 0065 00       		.byte	0
 661 0066 08       		.uleb128 0x8
 662 0067 34       		.uleb128 0x34
 663 0068 00       		.byte	0
 664 0069 03       		.uleb128 0x3
 665 006a 0E       		.uleb128 0xe
 666 006b 3A       		.uleb128 0x3a
 667 006c 0B       		.uleb128 0xb
 668 006d 3B       		.uleb128 0x3b
 669 006e 0B       		.uleb128 0xb
 670 006f 49       		.uleb128 0x49
 671 0070 13       		.uleb128 0x13
 672 0071 3F       		.uleb128 0x3f
ARM GAS  C:\Users\robert\AppData\Local\Temp\ccLB2jpd.s 			page 22


 673 0072 19       		.uleb128 0x19
 674 0073 3C       		.uleb128 0x3c
 675 0074 19       		.uleb128 0x19
 676 0075 00       		.byte	0
 677 0076 00       		.byte	0
 678 0077 09       		.uleb128 0x9
 679 0078 0F       		.uleb128 0xf
 680 0079 00       		.byte	0
 681 007a 0B       		.uleb128 0xb
 682 007b 0B       		.uleb128 0xb
 683 007c 49       		.uleb128 0x49
 684 007d 13       		.uleb128 0x13
 685 007e 00       		.byte	0
 686 007f 00       		.byte	0
 687 0080 00       		.byte	0
 688              		.section	.debug_aranges,"",%progbits
 689 0000 1C000000 		.4byte	0x1c
 690 0004 0200     		.2byte	0x2
 691 0006 00000000 		.4byte	.Ldebug_info0
 692 000a 04       		.byte	0x4
 693 000b 00       		.byte	0
 694 000c 0000     		.2byte	0
 695 000e 0000     		.2byte	0
 696 0010 00000000 		.4byte	.LFB0
 697 0014 8C020000 		.4byte	.LFE0-.LFB0
 698 0018 00000000 		.4byte	0
 699 001c 00000000 		.4byte	0
 700              		.section	.debug_ranges,"",%progbits
 701              	.Ldebug_ranges0:
 702 0000 00000000 		.4byte	.LFB0
 703 0004 8C020000 		.4byte	.LFE0
 704 0008 00000000 		.4byte	0
 705 000c 00000000 		.4byte	0
 706              		.section	.debug_line,"",%progbits
 707              	.Ldebug_line0:
 708 0000 BB000000 		.section	.debug_str,"MS",%progbits,1
 708      02005500 
 708      00000201 
 708      FB0E0D00 
 708      01010101 
 709              	.LASF6:
 710 0000 6C6F6E67 		.ascii	"long long int\000"
 710      206C6F6E 
 710      6720696E 
 710      7400
 711              	.LASF8:
 712 000e 756E7369 		.ascii	"unsigned int\000"
 712      676E6564 
 712      20696E74 
 712      00
 713              	.LASF23:
 714 001b 49324353 		.ascii	"I2CS_slWrBufSize\000"
 714      5F736C57 
 714      72427566 
 714      53697A65 
 714      00
 715              	.LASF15:
ARM GAS  C:\Users\robert\AppData\Local\Temp\ccLB2jpd.s 			page 23


 716 002c 746D7038 		.ascii	"tmp8\000"
 716      00
 717              	.LASF12:
 718 0031 75696E74 		.ascii	"uint8\000"
 718      3800
 719              	.LASF5:
 720 0037 6C6F6E67 		.ascii	"long unsigned int\000"
 720      20756E73 
 720      69676E65 
 720      6420696E 
 720      7400
 721              	.LASF7:
 722 0049 6C6F6E67 		.ascii	"long long unsigned int\000"
 722      206C6F6E 
 722      6720756E 
 722      7369676E 
 722      65642069 
 723              	.LASF18:
 724 0060 49324353 		.ascii	"I2CS_slStatus\000"
 724      5F736C53 
 724      74617475 
 724      7300
 725              	.LASF20:
 726 006e 49324353 		.ascii	"I2CS_slRdBufSize\000"
 726      5F736C52 
 726      64427566 
 726      53697A65 
 726      00
 727              	.LASF27:
 728 007f 433A5C55 		.ascii	"C:\\Users\\robert\\Documents\\PSoC Creator\\TestWor"
 728      73657273 
 728      5C726F62 
 728      6572745C 
 728      446F6375 
 729 00ad 6B737061 		.ascii	"kspace\\DelSig_I2CS01.cydsn\000"
 729      63655C44 
 729      656C5369 
 729      675F4932 
 729      43533031 
 730              	.LASF19:
 731 00c8 49324353 		.ascii	"I2CS_slRdBufPtr\000"
 731      5F736C52 
 731      64427566 
 731      50747200 
 732              	.LASF1:
 733 00d8 756E7369 		.ascii	"unsigned char\000"
 733      676E6564 
 733      20636861 
 733      7200
 734              	.LASF11:
 735 00e6 63686172 		.ascii	"char\000"
 735      00
 736              	.LASF17:
 737 00eb 49324353 		.ascii	"I2CS_state\000"
 737      5F737461 
 737      746500
 738              	.LASF4:
ARM GAS  C:\Users\robert\AppData\Local\Temp\ccLB2jpd.s 			page 24


 739 00f6 6C6F6E67 		.ascii	"long int\000"
 739      20696E74 
 739      00
 740              	.LASF28:
 741 00ff 49324353 		.ascii	"I2CS_ISR\000"
 741      5F495352 
 741      00
 742              	.LASF10:
 743 0108 646F7562 		.ascii	"double\000"
 743      6C6500
 744              	.LASF24:
 745 010f 49324353 		.ascii	"I2CS_slWrBufIndex\000"
 745      5F736C57 
 745      72427566 
 745      496E6465 
 745      7800
 746              	.LASF3:
 747 0121 73686F72 		.ascii	"short unsigned int\000"
 747      7420756E 
 747      7369676E 
 747      65642069 
 747      6E7400
 748              	.LASF0:
 749 0134 7369676E 		.ascii	"signed char\000"
 749      65642063 
 749      68617200 
 750              	.LASF21:
 751 0140 49324353 		.ascii	"I2CS_slRdBufIndex\000"
 751      5F736C52 
 751      64427566 
 751      496E6465 
 751      7800
 752              	.LASF22:
 753 0152 49324353 		.ascii	"I2CS_slWrBufPtr\000"
 753      5F736C57 
 753      72427566 
 753      50747200 
 754              	.LASF9:
 755 0162 666C6F61 		.ascii	"float\000"
 755      7400
 756              	.LASF25:
 757 0168 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 757      4320342E 
 757      392E3320 
 757      32303135 
 757      30333033 
 758 019b 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 758      20726576 
 758      6973696F 
 758      6E203232 
 758      31323230 
 759 01ce 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 759      66756E63 
 759      74696F6E 
 759      2D736563 
 759      74696F6E 
 760              	.LASF2:
ARM GAS  C:\Users\robert\AppData\Local\Temp\ccLB2jpd.s 			page 25


 761 01f6 73686F72 		.ascii	"short int\000"
 761      7420696E 
 761      7400
 762              	.LASF13:
 763 0200 72656738 		.ascii	"reg8\000"
 763      00
 764              	.LASF14:
 765 0205 73697A65 		.ascii	"sizetype\000"
 765      74797065 
 765      00
 766              	.LASF16:
 767 020e 746D7043 		.ascii	"tmpCsr\000"
 767      737200
 768              	.LASF26:
 769 0215 2E5C4765 		.ascii	".\\Generated_Source\\PSoC5\\I2CS_INT.c\000"
 769      6E657261 
 769      7465645F 
 769      536F7572 
 769      63655C50 
 770              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
